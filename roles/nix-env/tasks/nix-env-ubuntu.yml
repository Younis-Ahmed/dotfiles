---


- name: Check if nix-env is installed
  ansible.builtin.command: nix-env --version
  register: nix_env_version
  ignore_errors: true
  changed_when: false

- name: Set nix_env_check
  ansible.builtin.set_fact:
    nix_env_check: "{{ nix_env_version.rc == 0 }}"

- name: Nix-env | Install nix-env
  ansible.builtin.shell: |
    echo "nix-env is not installed on the system. Installing nix-env..." &&
    bash <(curl -L https://nixos.org/nix/install) --no-daemon
  args:
    executable: /bin/bash
  notify: Nix-env | Source nix-env
  when: nix_env_check == false


- name: Nix-env | Install nix packages | Check if new version is available
  ansible.builtin.shell: |
    nix-env -q --compare-versions nix
  args:
    executable: /bin/bash
  register: nix_version
  when: nix_env_check == true

- name: Extract and compare versions
  ansible.builtin.set_fact:
    is_update_available: "{{ nix_version.stdout.split()[0].split('-')[1] != nix_version.stdout.split()[2] }}"
  when: nix_version.stdout != ""

- name: Update nix if new version is available
  ansible.builtin.shell: |
    if [ "{{ is_update_available }}" == "true" ]; then
      echo "New version of nix is available. Updating nix to {{ nix_version.stdout.split()[2] }}..."
      nix-env -u nix
    else
      echo "Nix is up to date."
    fi
  args:
    executable: /bin/bash
  when: nix_version.stdout != ""


